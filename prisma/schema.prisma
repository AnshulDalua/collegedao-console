generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("PRISMA_DATABASE_URL")
  relationMode = "prisma"
}

enum Status {
  QUEUED
  PENDING
  RUNNING
  UPDATING
  DELETED
  FAILED
}

enum Permission {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

model User {
  id        String         @id @unique @default(cuid())
  name      String?
  email     String         @unique
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  metadata  Json?          @db.Json
  teams     UsersOnTeams[]
}

model UsersOnTeams {
  relation   Permission @default(VIEWER)
  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String     @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  assignedAt DateTime   @default(now())
  assignedBy String

  @@id([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Team {
  id        String         @id @unique @default(cuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  projects  Project[] 
  users     UsersOnTeams[]
  stacks    Stack[]
}

model Project {
  id          String       @id @unique @default(cuid())
  name        String
  userId     String?
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Stack       Stack[] 
  Credentials Credentials?

  @@index([teamId])
}

model Stack {
  id        String   @id @unique @default(cuid())
  name      String
  type      String
  status    Status
  input     Json     @default("{}") @db.Json
  output    Json     @default("{}") @db.Json
  error     Json     @default("[]") @db.Json
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([teamId])
}

model Credentials {
  id        String  @id @unique @default(cuid())
  contents  Json    @db.Json
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}
